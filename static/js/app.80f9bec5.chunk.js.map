{"version":3,"sources":["src/components/Filter.tsx","src/utils/Time.ts","src/components/Post.tsx","src/hooks/useRedditPost.ts","src/components/PostRenderer.tsx","src/hooks/useRedditComments.ts","src/hooks/useRedditSubSearch.ts","src/hooks/useRedditUser.ts","src/screens/Details.tsx","src/screens/Home.tsx","src/screens/Search.tsx","src/screens/SubReddit.tsx","src/screens/User.tsx","src/routes/Stack.tsx","App.tsx"],"names":["btns","label","icon","filters","Btn","text","onPress","selected","View","style","backgroundColor","undefined","paddingHorizontal","borderRadius","paddingVertical","marginLeft","TouchableOpacity","styles","btn","Fontisto","name","size","color","Text","btnTxt","Filter","show","setShow","filter","setFilter","container","btnContainer","map","i","old","filterContainer","StyleSheet","create","alignSelf","maxWidth","minHeight","maxHeight","minWidth","flexDirection","justifyContent","alignItems","flex","subreddit","fontSize","fontWeight","textTransform","position","zIndex","top","padding","borderWidth","borderColor","timeSince","date","seconds","Math","floor","Date","getTime","interval","React","memo","item","pressable","navigation","useNavigation","uri","data","thumbnail","aspect","preview","images","source","url","width","height","videoUri","secure_media","reddit_video","fallback_url","handleNav","useCallback","navigate","id","title","replaceAll","iframeData","secure_media_embed","content","split","forEach","e","includes","console","log","marginBottom","user","author","created_utc","activeOpacity","ellipsizeMode","numberOfLines","selftext","Image","encodeURI","image","aspectRatio","playBtn","Entypo","Video","useNativeControls","isLooping","isMuted","shouldPlay","resizeMode","ResizeMode","CONTAIN","videoStyle","src","allowFullScreen","Linking","openURL","marginTop","useRedditPost","timeFilter","useInfiniteQuery","pageParam","res","fetch","json","getNextPageParam","lastPage","after","retry","select","pageParams","pages","flatMap","children","keepPreviousData","refetchOnWindowFocus","PostRenderer","useState","setSelected","hasNextPage","fetchNextPage","renderItem","keyExtractor","SafeAreaView","ListHeaderComponent","contentContainerStyle","contentContainer","estimatedItemSize","onEndReachedThreshold","onEndReached","paddingLeft","paddingRight","paddingBottom","marginVertical","useRedditComments","useQuery","result","post","comment","useRedditSubSearch","term","useRedditUser","Details","route","params","isLoading","createTextNode","t","margin","key","adjustsFontSizeToFit","ScrollView","itemContainer","createCommentTree","initial","final","length","push","body","author_fullname","replies","Home","Search","search","setSearch","display_name","TextInput","input","placeholder","onSubmitEditing","nativeEvent","SubReddit","User","Stack","createNativeStackNavigator","linking","prefixes","config","screens","StackView","NavigationContainer","Navigator","screenOptions","headerShown","Screen","component","queryClient","QueryClient","App","client"],"mappings":"0OAKMA,EAA6D,CACjE,CACEC,MAAO,OACPC,KAAM,UAER,CACED,MAAO,MACPC,KAAM,QAER,CACED,MAAO,MACPC,KAAM,OAER,CACED,MAAO,MACPC,KAAM,aAIJC,EAAU,CAAC,QAAS,OAAQ,QAAS,OAAQ,OAE7CC,EAAM,SAAH,GAUF,IATLC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAL,EAAI,EAAJA,KAOA,OACE,cAACM,EAAA,QAAI,CACHC,MAAO,CACLC,gBAAiBH,EAAW,eAAYI,EACxCC,kBAAmB,GACnBC,aAAc,GACdC,gBAAiB,EACjBC,gBAAoBJ,GAART,EAAoB,QAAKS,GACrC,SAEF,eAACK,EAAA,QAAgB,CAACV,QAASA,EAASG,MAAOQ,EAAOC,IAAI,UACnDhB,GAAQ,cAACiB,EAAA,QAAQ,CAACC,KAAMlB,EAAMmB,KAAM,GAAIC,MAAM,SAC/C,cAACC,EAAA,QAAI,CAACd,MAAOQ,EAAOO,OAAO,SAAEnB,UA8DtBoB,EAxDA,SAAH,GAcL,IAbLnB,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAmB,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAM,EAANA,OACAC,EAAS,EAATA,UASA,OACE,eAACrB,EAAA,QAAI,CAACC,MAAOQ,EAAOa,UAAU,UAC5B,eAACtB,EAAA,QAAI,CAACC,MAAOQ,EAAOc,aAAa,UAC9B/B,EAAKgC,KAAI,SAACC,GAAC,OACV,cAAC,EAAG,CAEF/B,KAAM+B,EAAE/B,KACRI,QAAS,kBAAMA,EAAQ2B,EAAEhC,QACzBM,SAAUA,GAAY0B,EAAEhC,MACxBI,KAAM4B,EAAEhC,OAJHgC,EAAEhC,UAOE,OAAZM,GACC,cAAC,EAAG,CACFF,KAAMuB,EACNtB,QAAS,kBAAMqB,GAAQ,SAACO,GAAG,OAAMA,MACjC3B,UAAU,EACVL,UAAMS,OAKXe,GACC,cAAClB,EAAA,QAAI,CAACC,MAAOQ,EAAOkB,gBAAgB,SACjChC,EAAQ6B,KAAI,SAACC,GAAC,OACb,cAAC,EAAG,CAEF5B,KAAM4B,EACN3B,QAAS,WACPuB,EAAUI,GACVN,GAAQ,IAEVpB,SAAUqB,GAAUK,GANfA,YAiBbhB,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CACTQ,UAAW,SACX1B,kBAAmB,GACnB2B,SAAU,IACVC,UAAW,GACXC,UAAW,IACXC,SAAU,KAEZX,aAAc,CACZY,cAAe,MACfC,eAAgB,gBAChBlC,gBAAiB,UACjBmC,WAAY,SACZjC,kBAAmB,GACnBC,aAAc,EACdiC,KAAM,GAERC,UAAW,CACTC,SAAU,GACVC,WAAY,MACZC,cAAe,aACf5B,MAAO,QAETa,gBAAiB,CACfQ,cAAe,MACf5B,WAAY,GACZoC,SAAU,WACVC,OAAQ,IACRC,IAAK,GACL3C,gBAAiB,UACjB4C,QAAS,EACTzC,aAAc,GACd0C,YAAa,EACbC,YAAa,WAEfhC,OAAQ,CACNyB,WAAY,MACZ3B,MAAO,OACP0B,SAAU,GACVjC,WAAY,EACZmC,cAAe,cAEjBhC,IAAK,CACHyB,cAAe,MACfE,WAAY,SACZD,eAAgB,Y,mDC/Jb,SAASa,EAAUC,GACxB,IAAMC,EAAUC,KAAKC,QAClB,IAAIC,MAAOC,UAAY,IAAID,KAAY,IAAPJ,GAAaK,WAAa,KAGzDC,EAAWL,EAAU,QAEzB,OAAIK,EAAW,EACNJ,KAAKC,MAAMG,GAAY,UAEhCA,EAAWL,EAAU,QACN,EACNC,KAAKC,MAAMG,GAAY,WAEhCA,EAAWL,EAAU,OACN,EACNC,KAAKC,MAAMG,GAAY,SAEhCA,EAAWL,EAAU,MACN,EACNC,KAAKC,MAAMG,GAAY,UAEhCA,EAAWL,EAAU,IACN,EACNC,KAAKC,MAAMG,GAAY,WAEzBJ,KAAKC,MAAMF,GAAW,WCX/B,IAgKeM,MAAMC,MAhKR,SAAH,GAMH,IALLC,EAAI,EAAJA,KAAK,EAAD,EACJC,iBAAS,OAAO,EAKVC,EAAaC,0BAEfC,EAAMJ,EAAKK,KAAKC,UAChBC,EAAS,EACTP,EAAKK,KAAKG,UACZJ,EAAMJ,EAAKK,KAAKG,QAAQC,OAAO,GAAGC,OAAOC,IACzCJ,EACEP,EAAKK,KAAKG,QAAQC,OAAO,GAAGC,OAAOE,MACnCZ,EAAKK,KAAKG,QAAQC,OAAO,GAAGC,OAAOG,QAGvC,IAAIC,EAAW,GACXd,EAAKK,KAAKU,cACRf,EAAKK,KAAKU,aAAaC,eACzBF,EAAWd,EAAKK,KAAKU,aAAaC,aAAaC,aAE1ChB,IACHM,EACEP,EAAKK,KAAKU,aAAaC,aAAaJ,MACpCZ,EAAKK,KAAKU,aAAaC,aAAaH,SAI5C,IAAMK,EAAYpB,IAAMqB,aACtB,SAACnB,GAAS,OACRE,EAAWkB,SAAS,UAAW,CAC7BC,GAAIrB,EAAKK,KAAKgB,GACdzC,UAAWoB,EAAKK,KAAKzB,UACrB0C,MAAOtB,EAAKK,KAAKiB,MAAMC,WAAW,IAAK,SAE3C,IAGEC,EAAa,GACbxB,EAAKK,KAAKoB,oBAAsBzB,EAAKK,KAAKoB,mBAAmBC,SAClD1B,EAAKK,KAAKoB,mBAAmBC,QAAQC,MAAM,KACjDC,SAAQ,SAACC,GACVA,EAAEC,SAAS,SACbN,EAAaK,EAAEF,MAAM,KAAK,OAOhC,OAFAI,QAAQC,IAAIR,GAGV,eAACnF,EAAA,QAAI,CACHC,MAAO,CACLQ,EAAOa,UACP,CACEiD,MAAQX,OAAoBzD,EAAR,MACpB4B,SAAU6B,EAAY,IAAM,MAE9B,UAEF,eAAC5D,EAAA,QAAI,CAACC,MAAO,CAAEkC,cAAe,MAAOyD,aAAc,IAAK,UACtD,eAAC7E,EAAA,QAAI,CACHd,MAAO,CAAEa,MAAO,OAAQ0B,SAAU,IAClC1C,QAAS,kBACP+D,EAAWkB,SAAS,YAAa,CAC/BxC,UAAWoB,EAAKK,KAAKzB,aAExB,eAEEoB,EAAKK,KAAKzB,aAEf,cAACxB,EAAA,QAAI,CAACd,MAAO,CAAEa,MAAO,OAAQ0B,SAAU,IAAK,sBAC7C,eAACzB,EAAA,QAAI,CACHd,MAAO,CAAEa,MAAO,OAAQ0B,SAAU,IAClC1C,QAAS,kBACP+D,EAAWkB,SAAS,OAAQ,CAC1Bc,KAAMlC,EAAKK,KAAK8B,UAEnB,eAEEnC,EAAKK,KAAK8B,UAEf,eAAC/E,EAAA,QAAI,CAACd,MAAO,CAAEa,MAAO,OAAQ0B,SAAU,IAAK,UAC1C,IACAS,EAAUU,EAAKK,KAAK+B,mBAGzB,cAACvF,EAAA,QAAgB,CACfV,QAAS,kBAAM8D,GAAaiB,EAAUlB,IACtCqC,cAAepC,EAAY,GAAM,EAAE,SAEnC,qCACE,cAAC7C,EAAA,QAAI,CAACd,MAAOQ,EAAOwE,MAAOgB,cAAe,OAAQC,cAAe,EAAE,SAChEvC,EAAKK,KAAKiB,QAEb,cAAClE,EAAA,QAAI,CAACd,MAAO,CAAEa,MAAO,QAAS,SAAE6C,EAAKK,KAAKmC,YAC7B,IAAZ1B,GAAkBb,IAAqB,IAAPG,GAA2B,IAAdoB,GAC7C,eAACnF,EAAA,QAAI,CAACC,MAAO,CAAE0C,SAAU,YAAa,UACpC,cAACyD,EAAA,QAAK,CACJ/B,OAAQ,CACNN,IAAKsC,UAAUtC,IAEjB9D,MAAO,CACLQ,EAAO6F,MACP,CAAEC,YAAarC,EAAQjC,UAAW2B,EAAY,IAAM,QAG3C,IAAZa,GACC,cAACzE,EAAA,QAAI,CAACC,MAAOQ,EAAO+F,QAAQ,SAC1B,cAACC,EAAA,QAAM,CAAC7F,KAAK,kBAAkBC,KAAM,GAAIC,MAAM,cAK1C,IAAZ2D,IAAmBb,GAClB,cAAC8C,EAAA,QAAK,CACJrC,OAAQ,CACNN,IAAKU,GAEPkC,mBAAiB,EACjBC,WAAS,EACTC,SAAO,EACPC,YAAU,EACVC,WAAYC,aAAWC,QACvBC,WAAY,CACVX,YAAarC,EACbK,MAAO,OACPtC,UAAW,KAEbhC,MAAO,CACLsG,YAAarC,EACbK,MAAO,OACPtC,UAAW,OAKF,IAAdkD,GACC,wBACElF,MAAO,CAAEiC,SAAU,IAAKH,SAAU,IAAKwE,YAAa,KACpDY,IAAKhC,EACLiC,iBAAe,SAKtBzD,EAAKK,KAAKM,KACT,cAACvD,EAAA,QAAI,CACHd,MAAO,CAAEa,MAAO,QAChBhB,QAAS,kBAAMuH,UAAQC,QAAQ3D,EAAKK,KAAKM,MAAK,SAE7CX,EAAKK,KAAKM,YASf7D,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CACTiG,UAAW,GACXzF,UAAW,SACXI,SAAU,IACVhC,gBAAiB,UACjB4C,QAAS,GACTzC,aAAc,IAEhB4E,MAAO,CACLxC,WAAY,MACZD,SAAU,GACVoD,aAAc,GACd9E,MAAO,QAETwF,MAAO,CACL/B,MAAO,OAEPwC,WAAY,UACZjF,UAAW,cAEb0E,QAAS,CACP7D,SAAU,WACVb,UAAW,SACXM,eAAgB,SAChBoC,OAAQ,U,0CChKGgD,EAlCc,SAAH,GAIJ,IAHpBjF,EAAS,EAATA,UACAnB,EAAM,EAANA,OACAqG,EAAU,EAAVA,WAEA,OAAOC,2BACL,CAACnF,EAAWnB,EAAQqG,EAAY,QAAQ,WAAD,WACvC,aAA+B,IAAD,IAArBE,iBAAS,MAAG,GAAE,EACjBrD,EAAG,4BAA+B/B,EAAS,IAAInB,EAAM,6BAE3C,OAAVA,IAAiBkD,GAAG,eAAmBmD,GAE1B,IAAbE,IAAiBrD,EAAMA,EAAG,UAAaqD,GAC3C,IAAMC,QAAYC,MAAMvD,GAExB,aADmBsD,EAAIE,QACX9D,QACb,mDAVuC,GAWxC,CACE+D,iBAAkB,SAACC,GAAc,IAAD,EAC9B,OAAqB,OAArB,EAAOA,EAASC,QAAK,GAEvBC,MAAO,EACPC,OAAQ,SAACnE,GACP,MAAO,CACLoE,WAAYpE,EAAKoE,WACjBC,MAAOrE,EAAKqE,MAAMC,SAAQ,SAAC9C,GAAC,OAAKA,EAAE+C,cAGvCC,kBAAkB,EAClBC,sBAAsB,K,QCiBbC,EA/CM,SAAH,GAA8C,IAAD,EAAvCnG,EAAS,EAATA,UACtB,EAAgCkB,IAAMkF,SAAiB,QAAO,WAAvD5I,EAAQ,KAAE6I,EAAW,KAC5B,EAAwBnF,IAAMkF,UAAS,GAAM,WAAtCzH,EAAI,KAAEC,EAAO,KACpB,EAA4BsC,IAAMkF,SAAS,SAAQ,WAA5CvH,EAAM,KAAEC,EAAS,KAExB,EAA6CmG,EAAc,CACzDjF,YACAnB,OAAQrB,EACR0H,WAAYrG,IAHN4C,EAAI,EAAJA,KAAM6E,EAAW,EAAXA,YAAaC,EAAa,EAAbA,cAMrBC,EAAatF,IAAMqB,aACvB,gBAAGnB,EAAI,EAAJA,KAAI,OAAsB,cAAC,EAAI,CAAOA,WACzC,IAEIqF,EAAevF,IAAMqB,aAAY,SAACnB,GAAS,OAAKA,EAAKK,KAAKgB,KAAI,IAM9DlF,EAAU2D,IAAMqB,aAAY,SAACjF,GAAY,OAAK+I,EAAY/I,KAAO,IAEvE,OACE,cAACoJ,EAAA,QAAY,CAAChJ,MAAOQ,EAAOa,UAAU,SACpC,cAAC,YAAS,CACR4H,oBACE,qCACE,cAACnI,EAAA,QAAI,CAACd,MAAOQ,EAAO8B,UAAU,SAAEA,IAChC,cAAC,EAAM,CACCxC,WAAUD,UAASoB,OAAMC,UAASC,SAAQC,cAElD,cAACrB,EAAA,QAAI,CAACC,MAAO,CAAEsH,UAAWrG,EAAO,QAAKf,QAG1CgJ,sBAAuB1I,EAAO2I,iBAC9BpF,KAAiB,OAAb,EAAM,MAAJA,OAAI,EAAJA,EAAMqE,OAAK,EAAI,GACrBgB,kBAAmB,IACnBL,aAAcA,EACdD,WAAYA,EACZO,sBAAuB,GACvBC,aAxBc,WACdV,GAAaC,UA+BfrI,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CAAEgB,KAAM,EAAGpC,gBAAiB,WACvCkJ,iBAAkB,CAChBI,YAAa,GACbC,aAAc,GACdC,cAAe,IAEjBnH,UAAW,CACTG,cAAe,aACf5B,MAAO,OACP2B,WAAY,MACZD,SAAU,GACVN,SAAU,IACVH,SAAU,IACVD,UAAW,SACX6H,eAAgB,GAChBH,YAAa,MCjDFI,EArBW,SAAH,GAQhB,IAPL5E,EAAE,EAAFA,GACAzC,EAAS,EAATA,UACA0C,EAAK,EAALA,MAMA,OAAO4E,mBAAS,CAACtH,EAAWyC,EAAI,WAAW,KAAC,YAC1C,IAAM4C,QAAYC,MAAM,4BACMtF,EAAS,aAAayC,EAAE,IAAIC,EAAK,qBAEzD6E,QAAelC,EAAIE,OACzB,MAAO,CACLiC,KAAMD,EAAO,GAAG9F,KAAKuE,SAAS,GAC9ByB,QAASF,EAAO,GAAG9F,KAAKuE,eCUf0B,EA1BY,SAAH,GAAoC,IAA9BC,EAAI,EAAJA,KAC5B,OAAOxC,2BACL,CAACwC,EAAM,UAAU,WAAD,WAChB,aAA+B,IAAD,IAArBvC,iBAAS,MAAG,GAAE,EACjBrD,EAAG,mDAAsD4F,EAAI,uBAChD,IAAbvC,IAAiBrD,EAAMA,EAAG,UAAaqD,GAC3C,IAAMC,QAAYC,MAAMvD,GAExB,aADmBsD,EAAIE,QACX9D,QACb,mDAPgB,GAQjB,CACE+D,iBAAkB,SAACC,GAAc,IAAD,EAC9B,OAAqB,OAArB,EAAOA,EAASC,QAAK,GAEvBC,MAAO,EACPC,OAAQ,SAACnE,GACP,MAAO,CACLoE,WAAYpE,EAAKoE,WACjBC,MAAOrE,EAAKqE,MAAMC,SAAQ,SAAC9C,GAAC,OAAKA,EAAE+C,cAGvCC,kBAAkB,KCcT2B,EA7BO,SAAH,GAAqD,IAA/CtE,EAAI,EAAJA,KAAMzE,EAAM,EAANA,OAAQqG,EAAU,EAAVA,WACrC,OAAOC,2BACL,CAAC7B,EAAMzE,EAAQqG,EAAY,QAAQ,WAAD,WAClC,aAA+B,IAAD,IAArBE,iBAAS,MAAG,GAAE,EACjBrD,EAAG,+BAAkCuB,EAAI,4BAE/B,OAAVzE,IAAiBkD,GAAG,eAAmBmD,GAE1B,IAAbE,IAAiBrD,EAAMA,EAAG,UAAaqD,GAC3C,IAAMC,QAAYC,MAAMvD,GAExB,aADmBsD,EAAIE,QACX9D,QACb,mDAVkC,GAWnC,CACE+D,iBAAkB,SAACC,GAAc,IAAD,EAC9B,OAAqB,OAArB,EAAOA,EAASC,QAAK,GAEvBC,MAAO,EACPC,OAAQ,SAACnE,GACP,MAAO,CACLoE,WAAYpE,EAAKoE,WACjBC,MAAOrE,EAAKqE,MAAMC,SAAQ,SAAC9C,GAAC,OAAKA,EAAE+C,cAGvCC,kBAAkB,KCwCT4B,EA7DC,SAAH,GAAiC,IAC5C,EADsB,EAALC,MACsBC,OAA/BtF,EAAE,EAAFA,GAAIzC,EAAS,EAATA,UAAW0C,EAAK,EAALA,MACvB,EAA4B2E,EAAkB,CAAE3E,QAAOD,KAAIzC,cAAnDyB,EAAI,EAAJA,KAAMuG,EAAS,EAATA,UAERC,EAAiB,SACrBC,EACAC,EACA7E,EACA8E,GAAW,OAEX,eAAC3K,EAAA,QAAI,CAACC,MAAO,CAAEM,WAAYmK,EAAQnD,UAAW,IAAK,UACjD,cAACxG,EAAA,QAAI,CACHd,MAAO,CAAEa,MAAO,OAAQ2B,WAAY,MAAOD,SAAU,IACrDoI,sBAAoB,EACpB1E,cAAe,EAAE,SAEhBL,IAEH,cAAC9E,EAAA,QAAI,CAACd,MAAO,CAAEa,MAAO,OAAQyG,UAAW,GAAI,SAAEkD,MARQE,IAkC3D,OACE,cAAC1B,EAAA,QAAY,CAAChJ,MAAOQ,EAAOa,UAAU,UAClCiJ,GACA,eAACM,EAAA,QAAU,CAAC1B,sBAAuB,CAAEO,cAAe,IAAK,UACvD,cAAC,EAAI,CAAC/F,KAAU,MAAJK,OAAI,EAAJA,EAAM+F,KAAMnG,WAAW,IACnC,eAAC5D,EAAA,QAAI,CAACC,MAAOQ,EAAOqK,cAAc,UAChC,cAAC/J,EAAA,QAAI,CAACd,MAAO,CAAEuC,SAAU,GAAI1B,MAAO,OAAQ2B,WAAY,OAAQ,sBA5BhD,SAApBsI,EACJC,EACAC,GAEI,IADJP,EAAM,uDAAG,EAET,OAAKM,GAA6B,GAAlBA,EAAQE,QACxBF,EAAQzF,SAAQ,SAAC9D,GACfwJ,EAAME,KACJX,EACE/I,EAAEuC,KAAKoH,KACPV,EACAjJ,EAAEuC,KAAK8B,OACPrE,EAAEuC,KAAKqH,gBAAkB5J,EAAEuC,KAAKpD,OAGhCa,EAAEuC,KAAKsH,SACTP,EAAkBtJ,EAAEuC,KAAKsH,QAAQtH,KAAKuE,SAAU0C,EAAQP,GAAU,OAG/DO,GAdqC,KA0BnCF,CAAsB,MAAJ/G,OAAI,EAAJA,EAAMgG,QAAS,GAAI,YAU5CvJ,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CACTgB,KAAM,EACNpC,gBAAiB,WAEnB4K,cAAe,CACbvD,UAAW,GACXzF,UAAW,SACXI,SAAU,IACVH,SAAU,IACV7B,gBAAiB,UACjB4C,QAAS,GACTzC,aAAc,MC/EHkL,EAJF,WACX,OAAO,cAAC,EAAY,CAAChJ,UAAW,a,SCqDnBiJ,EAlDA,WACb,MAA4B/H,IAAMkF,SAAS,OAAM,WAA1C8C,EAAM,KAAEC,EAAS,KAExB,EAA6CzB,EAAmB,CAC9DC,KAAMuB,IADAzH,EAAI,EAAJA,KAAM6E,EAAW,EAAXA,YAAaC,EAAa,EAAbA,cAIrBjF,EAAaC,0BAEbiF,EAAatF,IAAMqB,aACvB,gBAAGnB,EAAI,EAAJA,KAAI,OACL,cAAC3D,EAAA,QAAI,CAACC,MAAO,CAAEsH,UAAW,GAAIzF,UAAW,UAAW,SAClD,cAACf,EAAA,QAAI,CACHd,MAAOQ,EAAOwE,MACdnF,QAAS,kBACP+D,EAAWkB,SAAS,YAAa,CAC/BxC,UAAWoB,EAAKK,KAAK2H,gBAExB,SAEAhI,EAAKK,KAAKM,UAIjB,IAEI0E,EAAevF,IAAMqB,aAAY,SAACnB,GAAS,OAAKA,EAAKK,KAAKM,MAAK,IAErE,OACE,eAAC2E,EAAA,QAAY,CAAChJ,MAAOQ,EAAOa,UAAU,UACpC,cAACtB,EAAA,QAAI,CAACC,MAAO,CAAE6B,UAAW,SAAUyF,UAAW,IAAK,SAClD,cAACqE,EAAA,QAAS,CACR3L,MAAOQ,EAAOoL,MACdC,YAAY,mBACZC,gBAAiB,SAACvG,GAAC,OAAKkG,EAAUlG,EAAEwG,YAAYnM,WAGpD,cAAC,YAAS,CACRmE,KAAU,MAAJA,OAAI,EAAJA,EAAMqE,MACZc,sBAAuB,CAAEO,cAAe,IACxCL,kBAAmB,GACnBL,aAAcA,EACdD,WAAYA,EACZO,sBAAuB,IACvBC,aAAc,kBAAMV,GAAe4C,EAAOP,OAAS,GAAKpC,WAQ1DrI,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CAAEgB,KAAM,EAAGpC,gBAAiB,WACvC2L,MAAO,CACLrH,OAAQ,GACRtC,SAAU,IACVH,SAAU,IACV7B,gBAAiB,UACjBE,kBAAmB,GACnBC,aAAc,GACdmC,SAAU,GACV1B,MAAO,QAETmE,MAAO,CACLnE,MAAO,OACPoB,SAAU,IACVH,SAAU,IACVS,SAAU,MClECyJ,EALG,SAAH,GAAuD,IAC5D1J,EADgB,EAAL8H,MACSC,OAApB/H,UACR,OAAO,cAAC,EAAY,CAACA,UAAWA,KCiDnB2J,EAhDF,SAAH,GAAkD,IAAD,EACjDrG,EADW,EAALwE,MACSC,OAAfzE,KAER,EAAgCpC,IAAMkF,SAAiB,QAAO,WAAvD5I,EAAQ,KAAE6I,EAAW,KAC5B,EAAwBnF,IAAMkF,UAAS,GAAM,WAAtCzH,EAAI,KAAEC,EAAO,KACpB,EAA4BsC,IAAMkF,SAAS,SAAQ,WAA5CvH,EAAM,KAAEC,EAAS,KAExB,EAA6C8I,EAAc,CACzDtE,OACAzE,OAAQrB,EACR0H,WAAYrG,IAHN4C,EAAI,EAAJA,KAAM6E,EAAW,EAAXA,YAAaC,EAAa,EAAbA,cAMrBC,EAAatF,IAAMqB,aAAY,YAA8B,IAA3BnB,EAAI,EAAJA,KACtC,OAAO,cAAC,EAAI,CAAOA,WAClB,IACGqF,EAAevF,IAAMqB,aAAY,SAACnB,GAAS,OAAKA,EAAKK,KAAKgB,KAAI,IAM9DlF,EAAU2D,IAAMqB,aAAY,SAACjF,GAAY,OAAK+I,EAAY/I,KAAO,IAEvE,OACE,cAACoJ,EAAA,QAAY,CAAChJ,MAAOQ,EAAOa,UAAU,SACpC,cAAC,YAAS,CACR4H,oBACE,qCACE,cAACnI,EAAA,QAAI,CAACd,MAAOQ,EAAO8B,UAAU,SAAEsD,IAChC,cAAC,EAAM,CACC9F,WAAUD,UAASoB,OAAMC,UAASC,SAAQC,cAElD,cAACrB,EAAA,QAAI,CAACC,MAAO,CAAEsH,UAAWrG,EAAO,QAAKf,QAG1CgJ,sBAAuB1I,EAAO2I,iBAC9BpF,KAAiB,OAAb,EAAM,MAAJA,OAAI,EAAJA,EAAMqE,OAAK,EAAI,GACrBgB,kBAAmB,IACnBL,aAAcA,EACdD,WAAYA,EACZO,sBAAuB,GACvBC,aAxBc,WACdV,GAAaC,UA+BfrI,EAASmB,UAAWC,OAAO,CAC/BP,UAAW,CAAEgB,KAAM,EAAGpC,gBAAiB,WACvCkJ,iBAAkB,CAChBI,YAAa,GACbC,aAAc,GACdC,cAAe,IAEjBnH,UAAW,CACTG,cAAe,aACf5B,MAAO,OACP2B,WAAY,MACZD,SAAU,GACVN,SAAU,IACVH,SAAU,IACVD,UAAW,SACX6H,eAAgB,GAChBH,YAAa,MCpEX2C,EAAQC,oBAERC,EAAU,CACdC,SAAU,CAAC,6BACXC,OAAQ,CACNC,QAAS,CACPjB,KAAM,cACNU,UAAW,2BACX7B,QAAS,+CACT8B,KAAM,sBACNV,OAAQ,wBAmBCiB,MAdf,WACE,OACE,cAACC,EAAA,QAAmB,CAACL,QAASA,EAAQ,SACpC,eAACF,EAAMQ,UAAS,CAACC,cAAe,CAAEC,aAAa,GAAQ,UACrD,cAACV,EAAMW,OAAM,CAAClM,KAAK,OAAOmM,UAAWxB,IACrC,cAACY,EAAMW,OAAM,CAAClM,KAAK,YAAYmM,UAAWd,IAC1C,cAACE,EAAMW,OAAM,CAAClM,KAAK,UAAUmM,UAAW3C,IACxC,cAAC+B,EAAMW,OAAM,CAAClM,KAAK,OAAOmM,UAAWb,IACrC,cAACC,EAAMW,OAAM,CAAClM,KAAK,SAASmM,UAAWvB,UCzBzCwB,EAAc,IAAIC,cAET,SAASC,KACtB,OACE,cAAC,sBAAmB,CAACC,OAAQH,EAAY,SACvC,cAAC,EAAK,Q","file":"static/js/app.80f9bec5.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { IconName } from \"../types\";\n\nconst btns: Array<{ label: string; icon: IconName<\"Fontisto\"> }> = [\n  {\n    label: \"best\",\n    icon: \"rocket\",\n  },\n  {\n    label: \"hot\",\n    icon: \"fire\",\n  },\n  {\n    label: \"new\",\n    icon: \"sun\",\n  },\n  {\n    label: \"top\",\n    icon: \"arrow-up\",\n  },\n];\n\nconst filters = [\"today\", \"week\", \"month\", \"year\", \"all\"];\n\nconst Btn = ({\n  text,\n  onPress,\n  selected,\n  icon,\n}: {\n  text: string;\n  onPress: () => void;\n  selected: boolean;\n  icon?: IconName<\"Fontisto\">;\n}) => {\n  return (\n    <View\n      style={{\n        backgroundColor: selected ? \"#495057\" : undefined,\n        paddingHorizontal: 10,\n        borderRadius: 15,\n        paddingVertical: 5,\n        marginLeft: icon == undefined ? 10 : undefined,\n      }}\n    >\n      <TouchableOpacity onPress={onPress} style={styles.btn}>\n        {icon && <Fontisto name={icon} size={20} color=\"#fff\" />}\n        <Text style={styles.btnTxt}>{text}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst Filter = ({\n  onPress,\n  selected,\n  show,\n  setShow,\n  filter,\n  setFilter,\n}: {\n  onPress: (text: string) => void;\n  selected: string;\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n  filter: string;\n  setFilter: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.btnContainer}>\n        {btns.map((i) => (\n          <Btn\n            key={i.label}\n            icon={i.icon}\n            onPress={() => onPress(i.label)}\n            selected={selected == i.label}\n            text={i.label}\n          />\n        ))}\n        {selected == \"top\" && (\n          <Btn\n            text={filter}\n            onPress={() => setShow((old) => !old)}\n            selected={true}\n            icon={undefined}\n          />\n        )}\n      </View>\n\n      {show && (\n        <View style={styles.filterContainer}>\n          {filters.map((i) => (\n            <Btn\n              key={i}\n              text={i}\n              onPress={() => {\n                setFilter(i);\n                setShow(false);\n              }}\n              selected={filter == i}\n            />\n          ))}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default Filter;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    paddingHorizontal: 10,\n    maxWidth: 600,\n    minHeight: 45,\n    maxHeight: 100,\n    minWidth: 400,\n  },\n  btnContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    backgroundColor: \"#212529\",\n    alignItems: \"center\",\n    paddingHorizontal: 10,\n    borderRadius: 5,\n    flex: 1,\n  },\n  subreddit: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    textTransform: \"capitalize\",\n    color: \"#fff\",\n  },\n  filterContainer: {\n    flexDirection: \"row\",\n    marginLeft: 20,\n    position: \"absolute\",\n    zIndex: 100,\n    top: 50,\n    backgroundColor: \"#212529\",\n    padding: 5,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: \"#f5f5f5\",\n  },\n  btnTxt: {\n    fontWeight: \"600\",\n    color: \"#fff\",\n    fontSize: 18,\n    marginLeft: 5,\n    textTransform: \"capitalize\",\n  },\n  btn: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","export function timeSince(date: number) {\n  const seconds = Math.floor(\n    (new Date().getTime() - new Date(date * 1000).getTime()) / 1000\n  );\n\n  let interval = seconds / 31536000;\n\n  if (interval > 1) {\n    return Math.floor(interval) + \" years\";\n  }\n  interval = seconds / 2592000;\n  if (interval > 1) {\n    return Math.floor(interval) + \" months\";\n  }\n  interval = seconds / 86400;\n  if (interval > 1) {\n    return Math.floor(interval) + \" days\";\n  }\n  interval = seconds / 3600;\n  if (interval > 1) {\n    return Math.floor(interval) + \" hours\";\n  }\n  interval = seconds / 60;\n  if (interval > 1) {\n    return Math.floor(interval) + \" minutes\";\n  }\n  return Math.floor(seconds) + \" seconds\";\n}\n","import React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity,\n  Linking,\n} from \"react-native\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Video, ResizeMode } from \"expo-av\";\nimport { timeSince } from \"../utils/Time\";\nimport { NavigationProps } from \"../types\";\n\nconst Post = ({\n  item,\n  pressable = true,\n}: {\n  item: any;\n  pressable?: boolean;\n}) => {\n  const navigation = useNavigation<NavigationProps<\"Home\">>();\n\n  let uri = item.data.thumbnail;\n  let aspect = 2;\n  if (item.data.preview) {\n    uri = item.data.preview.images[0].source.url;\n    aspect =\n      item.data.preview.images[0].source.width /\n      item.data.preview.images[0].source.height;\n  }\n\n  let videoUri = \"\";\n  if (item.data.secure_media) {\n    if (item.data.secure_media.reddit_video) {\n      videoUri = item.data.secure_media.reddit_video.fallback_url;\n\n      if (!pressable)\n        aspect =\n          item.data.secure_media.reddit_video.width /\n          item.data.secure_media.reddit_video.height;\n    }\n  }\n\n  const handleNav = React.useCallback(\n    (item: any) =>\n      navigation.navigate(\"Details\", {\n        id: item.data.id,\n        subreddit: item.data.subreddit,\n        title: item.data.title.replaceAll(\" \", \"_\"),\n      }),\n    []\n  );\n\n  let iframeData = \"\";\n  if (item.data.secure_media_embed && item.data.secure_media_embed.content) {\n    let splits = item.data.secure_media_embed.content.split(\" \");\n    splits.forEach((e: string) => {\n      if (e.includes(\"src\")) {\n        iframeData = e.split('\"')[1];\n      }\n    });\n  }\n\n  console.log(iframeData);\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          width: !pressable ? \"90%\" : undefined,\n          maxWidth: pressable ? 600 : 1000,\n        },\n      ]}\n    >\n      <View style={{ flexDirection: \"row\", marginBottom: 10 }}>\n        <Text\n          style={{ color: \"#fff\", fontSize: 15 }}\n          onPress={() =>\n            navigation.navigate(\"SubReddit\", {\n              subreddit: item.data.subreddit,\n            })\n          }\n        >\n          r/{item.data.subreddit}\n        </Text>\n        <Text style={{ color: \"#fff\", fontSize: 15 }}> • </Text>\n        <Text\n          style={{ color: \"#fff\", fontSize: 15 }}\n          onPress={() =>\n            navigation.navigate(\"User\", {\n              user: item.data.author,\n            })\n          }\n        >\n          u/{item.data.author}\n        </Text>\n        <Text style={{ color: \"#fff\", fontSize: 15 }}>\n          {\" \"}\n          {timeSince(item.data.created_utc)}\n        </Text>\n      </View>\n      <TouchableOpacity\n        onPress={() => pressable && handleNav(item)}\n        activeOpacity={pressable ? 0.6 : 1}\n      >\n        <>\n          <Text style={styles.title} ellipsizeMode={\"tail\"} numberOfLines={2}>\n            {item.data.title}\n          </Text>\n          <Text style={{ color: \"#fff\" }}>{item.data.selftext}</Text>\n          {(videoUri == \"\" || pressable) && uri != \"\" && iframeData == \"\" && (\n            <View style={{ position: \"relative\" }}>\n              <Image\n                source={{\n                  uri: encodeURI(uri),\n                }}\n                style={[\n                  styles.image,\n                  { aspectRatio: aspect, maxHeight: pressable ? 500 : 700 },\n                ]}\n              />\n              {videoUri != \"\" && (\n                <View style={styles.playBtn}>\n                  <Entypo name=\"controller-play\" size={90} color=\"#fff\" />\n                </View>\n              )}\n            </View>\n          )}\n          {videoUri != \"\" && !pressable && (\n            <Video\n              source={{\n                uri: videoUri,\n              }}\n              useNativeControls\n              isLooping\n              isMuted\n              shouldPlay\n              resizeMode={ResizeMode.CONTAIN}\n              videoStyle={{\n                aspectRatio: aspect,\n                width: \"100%\",\n                maxHeight: 700,\n              }}\n              style={{\n                aspectRatio: aspect,\n                width: \"100%\",\n                maxHeight: 700,\n              }}\n            />\n          )}\n\n          {iframeData != \"\" && (\n            <iframe\n              style={{ minWidth: 400, maxWidth: 600, aspectRatio: 1.5 }}\n              src={iframeData}\n              allowFullScreen\n            ></iframe>\n          )}\n        </>\n      </TouchableOpacity>\n      {item.data.url && (\n        <Text\n          style={{ color: \"#fff\" }}\n          onPress={() => Linking.openURL(item.data.url)}\n        >\n          {item.data.url}\n        </Text>\n      )}\n    </View>\n  );\n};\n\nexport default React.memo(Post);\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    alignSelf: \"center\",\n    minWidth: 400,\n    backgroundColor: \"#212529\",\n    padding: 20,\n    borderRadius: 10,\n  },\n  title: {\n    fontWeight: \"600\",\n    fontSize: 17,\n    marginBottom: 10,\n    color: \"#fff\",\n  },\n  image: {\n    width: \"100%\",\n    // maxHeight: 500,\n    resizeMode: \"contain\",\n    alignSelf: \"flex-start\",\n  },\n  playBtn: {\n    position: \"absolute\",\n    alignSelf: \"center\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n});\n","import { useInfiniteQuery } from \"react-query\";\n\ninterface InfiniteProps {\n  subreddit: string;\n  filter: string;\n  timeFilter: string;\n}\n\nexport const useRedditPost = ({\n  subreddit,\n  filter,\n  timeFilter,\n}: InfiniteProps) => {\n  return useInfiniteQuery(\n    [subreddit, filter, timeFilter, \"post\"],\n    async ({ pageParam = \"\" }) => {\n      let url = `https://www.reddit.com/r/${subreddit}/${filter}/.json?raw_json=1&count=25`;\n\n      if (filter == \"top\") url += `&sort=top&t=${timeFilter}`;\n\n      if (pageParam != \"\") url = url + `&after=${pageParam}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      return data.data;\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.after ?? false;\n      },\n      retry: 1,\n      select: (data) => {\n        return {\n          pageParams: data.pageParams,\n          pages: data.pages.flatMap((e) => e.children),\n        };\n      },\n      keepPreviousData: false,\n      refetchOnWindowFocus: false,\n    }\n  );\n};\n\nexport default useRedditPost;\n","import { SafeAreaView, StyleSheet, View, Text } from \"react-native\";\nimport React from \"react\";\nimport useRedditPost from \"../hooks/useRedditPost\";\nimport Post from \"./Post\";\nimport { FlashList } from \"@shopify/flash-list\";\nimport Filter from \"./Filter\";\n\nconst PostRenderer = ({ subreddit }: { subreddit: string }) => {\n  const [selected, setSelected] = React.useState<string>(\"best\");\n  const [show, setShow] = React.useState(false);\n  const [filter, setFilter] = React.useState(\"today\");\n\n  const { data, hasNextPage, fetchNextPage } = useRedditPost({\n    subreddit,\n    filter: selected,\n    timeFilter: filter,\n  });\n\n  const renderItem = React.useCallback(\n    ({ item }: { item: any }) => <Post {...{ item }} />,\n    []\n  );\n  const keyExtractor = React.useCallback((item: any) => item.data.id, []);\n\n  const getNextPage = () => {\n    if (hasNextPage) fetchNextPage();\n  };\n\n  const onPress = React.useCallback((text: string) => setSelected(text), []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlashList\n        ListHeaderComponent={\n          <>\n            <Text style={styles.subreddit}>{subreddit}</Text>\n            <Filter\n              {...{ selected, onPress, show, setShow, filter, setFilter }}\n            />\n            <View style={{ marginTop: show ? 40 : undefined }} />\n          </>\n        }\n        contentContainerStyle={styles.contentContainer}\n        data={data?.pages ?? []}\n        estimatedItemSize={600}\n        keyExtractor={keyExtractor}\n        renderItem={renderItem}\n        onEndReachedThreshold={0.3}\n        onEndReached={getNextPage}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default PostRenderer;\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: \"#343a40\" },\n  contentContainer: {\n    paddingLeft: 90,\n    paddingRight: 90,\n    paddingBottom: 90,\n  },\n  subreddit: {\n    textTransform: \"capitalize\",\n    color: \"#fff\",\n    fontWeight: \"600\",\n    fontSize: 26,\n    minWidth: 400,\n    maxWidth: 700,\n    alignSelf: \"center\",\n    marginVertical: 10,\n    paddingLeft: 10,\n  },\n});\n","import { useQuery } from \"react-query\";\n\nconst useRedditComments = ({\n  id,\n  subreddit,\n  title,\n}: {\n  id: string;\n  subreddit: string;\n  title: string;\n}) => {\n  return useQuery([subreddit, id, \"comment\"], async () => {\n    const res = await fetch(\n      `https://www.reddit.com/r/${subreddit}/comments/${id}/${title}/.json?raw_json=1`\n    );\n    const result = await res.json();\n    return {\n      post: result[0].data.children[0],\n      comment: result[1].data.children,\n    };\n  });\n};\n\nexport default useRedditComments;\n","import { useInfiniteQuery } from \"react-query\";\n\nconst useRedditSubSearch = ({ term }: { term: string }) => {\n  return useInfiniteQuery(\n    [term, \"search\"],\n    async ({ pageParam = \"\" }) => {\n      let url = `https://www.reddit.com/subreddits/search.json?q=${term}&raw_json=1&count=25`;\n      if (pageParam != \"\") url = url + `&after=${pageParam}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      return data.data;\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.after ?? false;\n      },\n      retry: 1,\n      select: (data) => {\n        return {\n          pageParams: data.pageParams,\n          pages: data.pages.flatMap((e) => e.children),\n        };\n      },\n      keepPreviousData: false,\n    }\n  );\n};\n\nexport default useRedditSubSearch;\n","import { useInfiniteQuery } from \"react-query\";\n\ninterface InfiniteProps {\n  user: string;\n  filter: string;\n  timeFilter: string;\n}\n\nconst useRedditUser = ({ user, filter, timeFilter }: InfiniteProps) => {\n  return useInfiniteQuery(\n    [user, filter, timeFilter, \"user\"],\n    async ({ pageParam = \"\" }) => {\n      let url = `https://www.reddit.com/user/${user}.json?raw_json=1&count=25`;\n\n      if (filter == \"top\") url += `&sort=top&t=${timeFilter}`;\n\n      if (pageParam != \"\") url = url + `&after=${pageParam}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      return data.data;\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.after ?? false;\n      },\n      retry: 1,\n      select: (data) => {\n        return {\n          pageParams: data.pageParams,\n          pages: data.pages.flatMap((e) => e.children),\n        };\n      },\n      keepPreviousData: false,\n    }\n  );\n};\n\nexport default useRedditUser;\n","import React from \"react\";\nimport { StyleSheet, View, Text, ScrollView, SafeAreaView } from \"react-native\";\nimport { Post } from \"../components\";\nimport { useRedditComments } from \"../hooks\";\n\nimport { RouteProps } from \"../types\";\n\ninterface DetailsProps {\n  route: RouteProps<\"Details\">;\n}\n\nconst Details = ({ route }: DetailsProps) => {\n  const { id, subreddit, title } = route.params;\n  const { data, isLoading } = useRedditComments({ title, id, subreddit });\n\n  const createTextNode = (\n    t: string,\n    margin: number,\n    user: string,\n    key: string\n  ) => (\n    <View style={{ marginLeft: margin, marginTop: 10 }} key={key}>\n      <Text\n        style={{ color: \"#fff\", fontWeight: \"600\", fontSize: 15 }}\n        adjustsFontSizeToFit\n        numberOfLines={1}\n      >\n        {user}\n      </Text>\n      <Text style={{ color: \"#fff\", marginTop: 3 }}>{t}</Text>\n    </View>\n  );\n\n  const createCommentTree = (\n    initial: Array<any>,\n    final: Array<React.ReactNode>,\n    margin = 0\n  ) => {\n    if (!initial || initial.length == 0) return null;\n    initial.forEach((i) => {\n      final.push(\n        createTextNode(\n          i.data.body,\n          margin,\n          i.data.author,\n          i.data.author_fullname + i.data.name\n        )\n      );\n      if (i.data.replies) {\n        createCommentTree(i.data.replies.data.children, final, (margin += 10));\n      }\n    });\n    return final;\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {!isLoading && (\n        <ScrollView contentContainerStyle={{ paddingBottom: 90 }}>\n          <Post item={data?.post} pressable={false} />\n          <View style={styles.itemContainer}>\n            <Text style={{ fontSize: 18, color: \"#fff\", fontWeight: \"900\" }}>\n              Comments\n            </Text>\n            {createCommentTree(data?.comment, [], 0)}\n          </View>\n        </ScrollView>\n      )}\n    </SafeAreaView>\n  );\n};\n\nexport default Details;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#343a40\",\n  },\n  itemContainer: {\n    marginTop: 20,\n    alignSelf: \"center\",\n    minWidth: 300,\n    maxWidth: 400,\n    backgroundColor: \"#212529\",\n    padding: 20,\n    borderRadius: 10,\n  },\n});\n","import React from \"react\";\nimport { PostRenderer } from \"../components\";\n\nconst Home = () => {\n  return <PostRenderer subreddit={\"popular\"} />;\n};\n\nexport default Home;\n","import React from \"react\";\nimport { SafeAreaView, StyleSheet, TextInput, View, Text } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { NavigationProps } from \"../types\";\nimport { useRedditSubSearch } from \"../hooks/\";\n\nconst Search = () => {\n  const [search, setSearch] = React.useState(\"ios\");\n\n  const { data, hasNextPage, fetchNextPage } = useRedditSubSearch({\n    term: search,\n  });\n\n  const navigation = useNavigation<NavigationProps<\"Search\">>();\n\n  const renderItem = React.useCallback(\n    ({ item }: { item: any }) => (\n      <View style={{ marginTop: 20, alignSelf: \"center\" }}>\n        <Text\n          style={styles.title}\n          onPress={() =>\n            navigation.navigate(\"SubReddit\", {\n              subreddit: item.data.display_name,\n            })\n          }\n        >\n          {item.data.url}\n        </Text>\n      </View>\n    ),\n    []\n  );\n  const keyExtractor = React.useCallback((item: any) => item.data.url, []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={{ alignSelf: \"center\", marginTop: 10 }}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Search Subreddit\"\n          onSubmitEditing={(e) => setSearch(e.nativeEvent.text)}\n        />\n      </View>\n      <FlashList\n        data={data?.pages}\n        contentContainerStyle={{ paddingBottom: 90 }}\n        estimatedItemSize={50}\n        keyExtractor={keyExtractor}\n        renderItem={renderItem}\n        onEndReachedThreshold={1.5}\n        onEndReached={() => hasNextPage && search.length > 0 && fetchNextPage()}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default Search;\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: \"#343a40\" },\n  input: {\n    height: 45,\n    minWidth: 400,\n    maxWidth: 600,\n    backgroundColor: \"#212529\",\n    paddingHorizontal: 10,\n    borderRadius: 10,\n    fontSize: 18,\n    color: \"#fff\",\n  },\n  title: {\n    color: \"#fff\",\n    minWidth: 400,\n    maxWidth: 500,\n    fontSize: 18,\n  },\n});\n","import React from \"react\";\nimport { RouteProps } from \"../types\";\nimport { PostRenderer } from \"../components\";\n\nconst SubReddit = ({ route }: { route: RouteProps<\"SubReddit\"> }) => {\n  const { subreddit } = route.params;\n  return <PostRenderer subreddit={subreddit} />;\n};\n\nexport default SubReddit;\n","import React from \"react\";\nimport { SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\nimport { useRedditUser } from \"../hooks/\";\nimport { Post, Filter } from \"../components\";\nimport { RouteProps } from \"../types\";\n\nconst User = ({ route }: { route: RouteProps<\"User\"> }) => {\n  const { user } = route.params;\n\n  const [selected, setSelected] = React.useState<string>(\"best\");\n  const [show, setShow] = React.useState(false);\n  const [filter, setFilter] = React.useState(\"today\");\n\n  const { data, hasNextPage, fetchNextPage } = useRedditUser({\n    user,\n    filter: selected,\n    timeFilter: filter,\n  });\n\n  const renderItem = React.useCallback(({ item }: { item: any }) => {\n    return <Post {...{ item }} />;\n  }, []);\n  const keyExtractor = React.useCallback((item: any) => item.data.id, []);\n\n  const getNextPage = () => {\n    if (hasNextPage) fetchNextPage();\n  };\n\n  const onPress = React.useCallback((text: string) => setSelected(text), []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlashList\n        ListHeaderComponent={\n          <>\n            <Text style={styles.subreddit}>{user}</Text>\n            <Filter\n              {...{ selected, onPress, show, setShow, filter, setFilter }}\n            />\n            <View style={{ marginTop: show ? 40 : undefined }} />\n          </>\n        }\n        contentContainerStyle={styles.contentContainer}\n        data={data?.pages ?? []}\n        estimatedItemSize={600}\n        keyExtractor={keyExtractor}\n        renderItem={renderItem}\n        onEndReachedThreshold={0.3}\n        onEndReached={getNextPage}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default User;\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: \"#343a40\" },\n  contentContainer: {\n    paddingLeft: 90,\n    paddingRight: 90,\n    paddingBottom: 90,\n  },\n  subreddit: {\n    textTransform: \"capitalize\",\n    color: \"#fff\",\n    fontWeight: \"600\",\n    fontSize: 26,\n    minWidth: 400,\n    maxWidth: 700,\n    alignSelf: \"center\",\n    marginVertical: 10,\n    paddingLeft: 10,\n  },\n});\n","import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { Home, Details, SubReddit, User, Search } from \"../screens\";\nimport { RootStackParamList } from \"../types\";\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nconst linking = {\n  prefixes: [\"https://iprabin.github.io\"],\n  config: {\n    screens: {\n      Home: \"redditclone\",\n      SubReddit: \"redditclone/r/:subreddit\",\n      Details: \"redditclone/r/:subreddit/comments/:id/:title\",\n      User: \"redditclone/u/:user\",\n      Search: \"redditclone/search\",\n    },\n  },\n};\n\nfunction StackView() {\n  return (\n    <NavigationContainer linking={linking}>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"SubReddit\" component={SubReddit} />\n        <Stack.Screen name=\"Details\" component={Details} />\n        <Stack.Screen name=\"User\" component={User} />\n        <Stack.Screen name=\"Search\" component={Search} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default StackView;\n","import Stack from \"./src/routes/Stack\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Stack />\n    </QueryClientProvider>\n  );\n}\n"],"sourceRoot":""}